package com.inventory.patterns;

import com.inventory.models.Product;

import java.util.HashMap;
import java.util.Map;

public class InventoryService {
    private final Map<String, Integer> stock; // id_producto -> cantidad
    private final ProductService productService;

    public InventoryService(ProductService productService) {
        this.stock = new HashMap<>();
        this.productService = productService;
    }

    public boolean addStock(String productId, int quantity) {
        Product product = productService.getProductById(productId);
        if (product == null || quantity <= 0) return false;

        stock.put(productId, stock.getOrDefault(productId, 0) + quantity);
        product.setQuantity(stock.get(productId)); // sync with product
        return true;
    }

    public boolean removeStock(String productId, int quantity) {
        if (!stock.containsKey(productId)) return false;

        int current = stock.get(productId);
        if (quantity <= 0 || quantity > current) return false;

        stock.put(productId, current - quantity);
        productService.getProductById(productId).setQuantity(stock.get(productId));
        return true;
    }

    public int getStock(String productId) {
        return stock.getOrDefault(productId, 0);
    }

    public Map<Product, Integer> getInventoryState() {
        Map<Product, Integer> inventory = new HashMap<>();
        for (String id : stock.keySet()) {
            Product product = productService.getProductById(id);
            if (product != null) {
                inventory.put(product, stock.get(id));
            }
        }
        return inventory;
    }
}
